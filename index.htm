<!DOCTYPE html>
<html>
<head>
<meta charset="utf8">
<title>日本列島をダーツで旅するやつ</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>
<script src="https://unpkg.com/leaflet-center-cross@0.0.8/dist/leaflet.CenterCross.js"></script>
<script src="https://unpkg.com/flatgeobuf/dist/flatgeobuf-geojson.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script src="./pointPolygonIntersection.js"></script>
<script src="./muni.js"></script>
<style>
.dart-button {
	display: block;
	margin: 10px auto;
	width: 300px;
	height: 50px;
	background-color: #f00;
	border-radius: 30px;
	color: #fff;
	font-weight: bold;
	font-size: 1.5em;
	cursor: pointer;
}
.dart-button:hover {
  background-color: #f33;
}
.dart-button:active{
  background-color: #c33;
}

body{
  margin:0;
}
#title {
	background-color: #a00;
	font-size: 1.2em;
	margin: 0;
	text-align: center;
	color: #fff;
	font-family: serif;
	font-weight: bold;
}
#map {
  height:75svh;
}
#console {
  margin-bottom:20px;
}
#options {
  display: flex;
  flex-direction: row;
  gap:20px;
  margin-inline-start: calc(50% - 225px);
}
@media (orientation: portrait) {
  #options {
    flex-direction: column;
    gap:5px;
    text-align: center;
    margin:auto;
  }
}

#history{
  width:fit-content;
  min-width:320px;
  margin:auto;
}
#history-title {
  text-align:center;
  background-color:#eef;
  margin-bottom:0;
}
#history-console-opener-container {
  float:right;
  position:relative
}
#history-console-opener {
  position:absolute;
  right:0;
  width:30px;
  height:30px;
  margin-right:10px;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items:center;
}
#history-console-opener>input[type=checkbox]{
  display:none;
}
#history-console-opener>input[type=checkbox]:not(:checked)+span{
  transform:rotate(90deg);
}
#history-console-opener>input[type=checkbox]:checked+span{
  transform:rotate(-90deg);
}
#history-console {
  background-color: #eee;
  border-radius:5px;
  margin:10px 0;
  padding:5px;
}

#history-list {
  font-size:small;
  border-collapse:collapse
}
#history-list>tbody tr:nth-child(odd){
  background-color:#eef;
}
#history-list>tbody tr:nth-child(even){
  background-color: #fff;
}
#history-list button {
	border: none;
	background: inherit;
	cursor: pointer;
	color: #999;
  margin-left:10px;
}
#history-list button:hover {
  color: #f33;
}
#history-export-dialog {
  border:none;
  border-radius:10px;
  padding:10px;
  text-align:center;
  box-shadow: 0 0 3px #666;
  min-width:240px;
}
ul.button-list {
  list-style-type: none;
  padding:5px;
  margin:5px;
}
ul.button-list li{
  margin:10px 0;
}
ul.button-list li button{ 
	min-width: 100px;
	line-height: 26px;
	border-radius: 15px;
	border-width: 1px;
}
.dialog-close-button {
	border: none;
	padding: 0 10px;
	background: none;
	color: blue;
	text-decoration: underline;
}
</style>
</head>
<body>

<h1 id="title">日本列島をダーツで旅するやつ</h1>
<main id="main" x-data="dart">
  <div id="map"></div>
  <div id="console">
    <button class="dart-button" @click="throw_dart">ダーツを投げる🎯</button>
    <div id="options">
      <div>
        対象：
        <select x-model="mode" @change="mode_change" x-init="dart.japan.init()">
          <option value="japan" selected>日本全国</option>
          <option value="prefecture">都道府県を選択</option>
          <option value="area">地図の中心から</option>
        </select>
      </div>
      <div class="option-prefecture" x-show="mode=='prefecture'" x-init="load_pref_list">
        <select x-model="prefecture" @change="dart.prefs.load(prefecture)">
          <template x-for="pref in pref_list">
            <option x-text="pref.name"></option>
          </template>
        </select>
      </div>
      <div class="option-area" x-show="mode=='area'" x-init="dart.area.setRadius(area_radius)">
        <input type="range" min="1" max="200" id="area_radius" x-model="area_radius" @input="dart.area.setRadius(area_radius)">
        <input type="number" x-model="area_radius" size="3" style="width:3em" @input="dart.area.setRadius(area_radius)">km
        <button @click="dart.area.reopen()">再配置</button>
      </div>
    </div>
  </div>
  <div id="history" x-data="{console_open:false}">
    <div id="history-console-opener-container">
      <label id="history-console-opener">
        <input type="checkbox" x-model="console_open">
        <span>&#x276F;</span>
      </label>
    </div>
    <h3 id="history-title">履歴</h3>
    <div id="history-console" x-show="console_open">
      <button @click="clear_history">履歴をクリア</button>
      <button @click="$refs.history_export_dialog.showModal()">エクスポート</button>
    </div>
    <dialog id="history-export-dialog" x-ref="history_export_dialog">
      <h4 style="font-size:1.2em;margin:0;font-weight:normal">エクスポート</h4>
      <ul class="button-list">
        <li>
          <button @click="export_history('geoJSON')">GeoJSON</button><br>
          <small>QGISなどGISソフト向けの形式です</small>
        </li>
        <li>
          <button @click="export_history('CSV')">CSV(UTF-8)</button><br>
          <small>汎用的なカンマ区切りテキストです。<br>文字コードの関係でExcelでは文字化けします。</small>
      </li>
        <li>
          <button @click="export_history('list-txt')">txt</button><br>
          <small>座標を列挙したテキストです</small>
        </li>
      </ul>
      <form method="dialog" style="margin-bottom:10px;">
        <button value="close" class="dialog-close-button">閉じる</button>
      </form>
      <div style="display:none">
        <a x-ref="dl_link"></a>
      </div>
    </dialog>
    <table id="history-list">
      <tbody>
        <template x-for="(hist,i) in history">
          <tr>
            <td x-text="hist.placeName"></td>
            <td>
              <a href="javascript:void(0)" x-text="`(${hist.latlng[0].toFixed(4)},${hist.latlng[1].toFixed(4)})`" @click="restore_history(i)"></a>
            </td>
            <td>
              <button @click="delete_history(i)">✖</button>
            </td>
          </tr>
        </template>
      </tbody>
    </table>
  </div>
</main>
<footer id="footer" style="font-size: small; text-align: center; margin:20px;">
  &copy; 2025 <a href="https://x.com/tfukumahi" target="_blank">@tfukumahi</a>
</footer>

<script>
const dart = (()=>{
  const def_center = [35.164828,136.867676];
  const the_map = L.map("map").setView(def_center,5);
  L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
  }).addTo(the_map);
  the_map.addControl(L.control.centerCross({
    show: true,
    position: "topleft"
  }));
  const dart_icon = L.icon({
    iconUrl: "./dart56a.png",
    iconSize: [53,56],
    iconAnchor: [0,55],
    shadowUrl:"./dart56a_shadow.png",
    shadowSize:[56,28],
    shadowAnchor:[0,21]
  })

  const marker = L.marker(def_center, {icon:dart_icon});
  let show_marker = false;
  let popup = null;

  function create_googlemaps_url(latlng, zoom=10){
    const lat = parseFloat(latlng[0]).toFixed(8);
    const lng = parseFloat(latlng[1]).toFixed(8);
    zoom = Math.min(Math.max(parseInt(zoom),0),22)+"";
    //return `https://www.google.co.jp/maps/@${lat},${lng},${zoom}z`;
    return `https://www.google.co.jp/maps/place/${encodeURIComponent(lat+","+lng)}/@${lat},${lng},${zoom}z`;
  }
  function create_gsimaps_url(latlng, zoom=10){
    const lat = parseFloat(latlng[0]).toFixed(6);
    const lng = parseFloat(latlng[1]).toFixed(6);
    zoom = Math.min(Math.max(parseInt(zoom),0),22)+"";
    return `https://maps.gsi.go.jp/#${zoom}/${lat}/${lng}/`;
  }
  function create_geouri(latlng, zoom=10){
    const lat = parseFloat(latlng[0]).toFixed(6);
    const lng = parseFloat(latlng[1]).toFixed(6);
    zoom = Math.min(Math.max(parseInt(zoom),0),22)+"";
    return `geo:${lat},${lng}?q=${lat},${lng}&z=${zoom}`;
  }
  function create_share_url(latlng, placeName="（不明な地点）"){
    const lat = parseFloat(latlng[0]).toFixed(8);
    const lng = parseFloat(latlng[1]).toFixed(8);
    return location.origin + location.pathname + `?ll=${lat},${lng}`;
  }
  function create_twitter_share(latlng, placeName="（不明な地点）"){
    const share_url = create_share_url(latlng, placeName);
    const tweet_text = `【ダーツ旅】私は今から${placeName}に行ってきます！\n`;
    return `https://x.com/intent/tweet?text=${encodeURIComponent(tweet_text)}&url=${encodeURIComponent(share_url)}`;
  }
  function is_mobile(){
    const mql = window.matchMedia("(max-width: 480px) and (orientation: portrait), (max-height: 480px) and (orientation: landscape)");
    return mql.matches;
  }

  async function put_marker(latlng, nopopup=false){
    if(popup){popup.closePopup();}
    if(!show_marker){
      marker.addTo(the_map);
      show_marker = true;
    }
    marker.setLatLng(latlng);
    let zoom = 10;
    const current_zoom = the_map.getZoom();
    if(10 < current_zoom && current_zoom < 14){
      zoom = current_zoom;
    }
    the_map.flyTo(latlng, zoom, {animate:true});  
    if(nopopup) return;
    let placeName = "";
    await fetch(`https://mreversegeocoder.gsi.go.jp/reverse-geocoder/LonLatToAddress?lat=${latlng[0]}&lon=${latlng[1]}`)
      .then(resp=>resp.json())
      .then(json=>{
        if(!json.results){
          //console.log("not japan");
          placeName = "（不明な地点）"
        }
        else{
          //console.log(json.results);
          const muniCd = json.results.muniCd;
          const muni = Muni.get(muniCd);
          if(!muni){
             //console.log("unknown place");
             placeName = "（不明な地点）"
          }
          else{
            const prefName = muni.prefName;
            const muniName = muni.muniName;
            const townName = json.results.lv01Nm;
            placeName = `${prefName}${muniName}${townName=="-"?"":townName}`;
          }
        }
        placeName = placeName.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/　/g,"");
        const urls = `
          <a href="${create_googlemaps_url(latlng, zoom)}" target="_blank">Googleマップ</a><br />
          <a href="${create_gsimaps_url(latlng, zoom)}" target="_blank">地理院地図</a>` + (is_mobile()?`
          <br /><a href="${create_geouri(latlng, zoom)}" target="_blank">アプリを開く</a>
          `:"");
        const shares = `
          <a href="${create_twitter_share(latlng, placeName)}" target="_blank">&#x1D54F;にポスト</a> | 
          <a href="${create_share_url(latlng, placeName)}" target="_blank">共有リンク</a>
          `
        setTimeout(()=>{
          popup = marker.bindPopup(`<strong>${placeName}</strong><br />に、行ってらっしゃい<br /><br />${urls}<br /><br />${shares}`).openPopup();
        },1000);
      });
    return {latlng, placeName};
  }

  const area =  (()=>{
    const circle = L.circle(def_center, {radius:50 * 1000});
    let show_circle = false;
    function get_random_point(ll,radius){
      const angle = Math.random() * 2 * Math.PI; //radian
      const dist = Math.random() * radius; //km
      const lat_rad = ll[0] * Math.PI / 180; //radian
      const lng_rad = ll[1] * Math.PI / 180; //radian

      const a = 6378.137;
      const f = 1 / 298.257222101;
      const e2 = 2*f - f*f;
      const W = Math.sqrt(1 - e2 * Math.pow(Math.sin(lat_rad),2));
      const M = a * (1 - e2) / Math.pow(W,3)
      const N = a / W;

      const dlat = dist * Math.cos(angle) / M; //radian
      const dlng = dist * Math.sin(angle) / (N * Math.cos(lat_rad)); //radian
      
      const lat2 = (lat_rad + dlat) * 180 / Math.PI;
      const lng2 = (lng_rad + dlng) * 180 / Math.PI;
      return [lat2, lng2]
    }
    return {
      open(){
        if(!show_circle){
          circle.setLatLng(the_map.getCenter());
          circle.addTo(the_map);
          show_circle = true;
        }
      },
      close(){
        if(show_circle){
          circle.remove();
          show_circle = false;
        }
      },
      reopen(){
        circle.setLatLng(the_map.getCenter());
      },
      setRadius(radius = 50){
        circle.setRadius(radius * 1000);
      },
      random(radius = 50){
        const ll = circle.getLatLng();
        const new_ll = get_random_point([ll.lat,ll.lng], radius);
        return Promise.resolve(new_ll);
      }
    }
  })();

  class Region{
    constructor({
      name="",
      filename="",
      urlbase="./", 
      range=[[0,0],[0,0]],
      code=0
    }){
      this.name = name;
      this.filename = filename;
      this.urlbase = urlbase;
      this.range = range;
      this.code = code;
      this.loaded = false;
      this.features = [];
      this.meta = {};
    }
    async load(){
      if(this.loaded) return this.features;
      const url = this.urlbase + this.filename;
      const features = [];
      await fetch(url).then(async resp=>{
        for await (let feature of flatgeobuf.deserialize(resp.body, undefined, meta=>{this.meta=meta})){
          features.push(feature);
        }
        this.features = features;
        this.loaded = true;
      })
      return features;
    }
    async random(){
      await this.load();
      const random_point = range=>range.map(r=>{
        const rr = [Math.min(...r),Math.max(...r)];
        return rr[0] + Math.random()*(rr[1]-rr[0]);
      });
      const range = this.range;
      let latlng;
      let count=0;
      while(true){
        count++;
        const ll = random_point(range);
        if(this.check_hit(ll)){
          latlng = ll;
          break;
        }
      }
      return latlng;
    }
    check_hit(latlng){
      return this.features.some(feature=>geo_pointPolygonIntersection(latlng,feature))
    }
  }

  const japan = (()=>{
    const region = new Region({
      name:"日本",
      filename:"japan_simple5b.fgb",
      urlbase:"./",
      range:[
        [20.419291, 45.548679],
        [122.931519, 153.995361]
      ]
    });
    return {
      async init(){
        const j = await region.load();
        return j;
      },
      async random(){
        return await region.random();
      }
    };
  })();

  const prefs = (()=>{
    const list_url = "./pref/list.json";
    const list = {};
    let list_loaded = false;
    return {
      async init(){
        if(list_loaded) return list;
        await fetch(list_url).then(resp=>resp.json()).then(json=>{
          for (let prefName in json){
            list[prefName] = new Region({
              name:prefName,
              urlbase:"./pref/",
              filename:json[prefName].filename,
              range:json[prefName].range,
              code:json[prefName].code
            });
          }
          list_loaded = true;
        })
        return list;
      },
      async load(pref){
        const p = await list[pref].load();
        return p;
      },
      async random(pref){
        return await list[pref].random();
      }
    }
  })();

  return {
    put_marker,
    area,
    japan,
    prefs
  }
})();

document.addEventListener("alpine:init", ()=>{
  Alpine.data("dart", ()=>({
    mode:"japan",
    area_radius:50,
    prefecture:"北海道",
    pref_list:{},
    history:[],
    mode_change(){
      if(this.mode=="area"){
        dart.area.open();
      }
      else{
        dart.area.close();
      }
    },
    async load_pref_list(){
      const list = await dart.prefs.init();
      this.pref_list = Object.values(list).sort((a,b)=>a.code - b.code);
      dart.prefs.load(this.pref_list[0].name);
    },
    async throw_dart(){
      if(this.mode=="japan"){
        const ll = await dart.japan.random();
        const obj = await dart.put_marker(ll);
        this.add_history({mode:"japan", ...obj});
      }
      if(this.mode=="prefecture"){
        const ll = await dart.prefs.random(this.prefecture);
        const obj = await dart.put_marker(ll);
        this.add_history({mode:"prefecture", ...obj});
      }
      if(this.mode=="area"){
        const ll = await dart.area.random(this.area_radius);
        const obj = await dart.put_marker(ll);
        this.add_history({mode:"area", ...obj});
      }
    },
    add_history({mode, latlng, placeName}){
      this.history.unshift({mode, latlng, placeName, time:Date.now()});
      this.save_history();
    },
    restore_history(i){
      const hist = this.history[i];
      dart.put_marker(hist.latlng);
    },
    delete_history(i){
      this.history.splice(i,1);
      this.save_history();
    },
    save_history(){
      localStorage.setItem("dart_history", JSON.stringify(this.history));
    },
    load_history(){
      if(localStorage.getItem("dart_history")){
        this.history = JSON.parse(localStorage.getItem("dart_history"));
      }
    },
    clear_history(){
      if(confirm("履歴を全て削除しますか?")){
        this.history.length = 0;
      }      
    },
    create_history_CSV(){
      const column_separator = ",";
      const row_separator = "\r\n";
      const header = ["no","mode","placeName","latitude","longtitude", "timestamp"];
      const csv = [header.join(column_separator)];
      this.history.forEach((hist,index)=>{
        const row = [index, hist["mode"], hist["placeName"], hist["latlng"][0], hist["latlng"][1], hist["time"]].map(v=>{
          if(v.toString().indexOf(column_separator)!=-1){
            return `"${v.toString()}"`;
          }
          return v.toString();
        });
        csv.push(row.join(column_separator));
      });
      return csv.join(row_separator);
    },
    create_history_txt(){
      return this.history.map(hist=>hist.latlng.join(",")).join("\r\n");
    },
    create_history_geoJSON(){
      const root = {type:"FeatureCollection",features:[]};
      this.history.forEach(hist=>{
        root.features.push({
          type:"Feature",
          geometry:{
            type:"Point",
            coordinates:[hist.latlng[1],hist.latlng[0]]
          },
          properties:{
            name:hist.placeName
          }
        });
      })
      return JSON.stringify(root);
    },
    export_history(mode){
      let text = "{}", mime = "application/json", fileext = ".json";
      if(mode=="CSV"){
        text = this.create_history_CSV();
        mime = "text/csv";
        fileext = ".csv";
      }
      else if(mode=="list-txt"){
        text = this.create_history_txt();
        mime = "text/plain";
        fileext = ".txt";
      }
      else if(mode=="geoJSON"){
        text = this.create_history_geoJSON();
        mime = "application/json";
        fileext = ".geojson";
      }
      const blob = new Blob([text], {type:mime});
      const objecturl = URL.createObjectURL(blob);
      const link = this.$refs.dl_link;
      link.href = objecturl;
      link.download = `dart-${Date.now()}${fileext}`;
      link.click();
    },
    async load_point(){
      if(location.search){
        const params = new URLSearchParams(location.search);
        let ll = params.get("ll");
        history.replaceState(null,"",location.origin + location.pathname);
        if(ll){
          ll = decodeURIComponent(ll);
          const match = ll.match(/^(\d+(?:\.\d+)?),(\d+(?:\.\d+)?)$/);
          const lat = parseFloat(match[1]);
          const lng = parseFloat(match[2]);
          if(match){
            const obj = await dart.put_marker([lat,lng]);
            this.add_history({mode:"url", ...obj});
          }
        }
      }
    },
    init(){
      this.load_history();
      this.load_point();
    }
  }))
})
</script>
</body>
</html>