function generateRandomLocationEllipsoid(latitude, longitude, distanceKm) {
  // 1. ランダムに0-360の[角度]を生成
  const angle = Math.random() * 360; // 角度（度）

  // 2. ランダムに[距離]km未満の距離[距離2]を生成
  const distance2Km = Math.random() * distanceKm; // 新しい距離（km）

  // 地球のWGS84楕円体パラメータ
  const EQUATORIAL_RADIUS_A = 6378.137; // 赤道半径 (km)
  const POLAR_RADIUS_B = 6356.752314245; // 極半径 (km)
  const FLATTENING_F = (EQUATORIAL_RADIUS_A - POLAR_RADIUS_B) / EQUATORIAL_RADIUS_A; // 扁平率

  // 緯度と経度をラジアンに変換
  const latRad = (latitude * Math.PI) / 180;
  const lonRad = (longitude * Math.PI) / 180;
  const angleRad = (angle * Math.PI) / 180;

  // 緯度における子午線曲率半径 (Meridional Radius of Curvature, M)
  const M = EQUATORIAL_RADIUS_A * (1 - FLATTENING_F * FLATTATTENING_F) / Math.pow((1 - FLATTENING_F * FLATTENING_F * Math.sin(latRad) * Math.sin(latRad)), 1.5);
  // 緯度における卯酉線曲率半径 (Normal Radius of Curvature, N)
  const N = EQUATORIAL_RADIUS_A / Math.sqrt(1 - FLATTENING_F * FLATTENING_F * Math.sin(latRad) * Math.sin(latRad));

  // 緯度の変化量 (dLat) の近似
  const dLat = (distance2Km * Math.cos(angleRad)) / M;

  // 経度の変化量 (dLon) の近似
  // 経度の変化は緯度によって異なるため、N * cos(latRad) で割る
  const dLon = (distance2Km * Math.sin(angleRad)) / (N * Math.cos(latRad));

  // 新しい緯度と経度を計算 (ラジアン)
  const lat2Rad = latRad + dLat;
  const lon2Rad = lonRad + dLon;

  // ラジアンを度に変換
  const latitude2 = (lat2Rad * 180) / Math.PI;
  const longitude2 = (lon2Rad * 180) / Math.PI;

  // 出力形式でGoogleマップのURLを生成
  return `www.google.co.jp/maps/place/${latitude2},${longitude2}`;
}

// 使用例：
// 東京駅付近（緯度: 35.681236, 経度: 139.767125）から50km以内のランダムな地点を生成
const googleMapsUrlEllipsoid = generateRandomLocationEllipsoid(35.681236, 139.767125, 50);
console.log(googleMapsUrlEllipsoid);